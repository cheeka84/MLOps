name: Tourism Project Pipeline

on:
  push:
    branches:
      - main

jobs:

  register-dataset:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: upload dataset to hugging face hub
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          python - <<'PY'
          import os
          from huggingface_hub import HfApi, create_repo
          from huggingface_hub.utils import RepositoryNotFoundError
          api = HfApi(token=os.environ["HF_TOKEN"])

          # dataset repo where the CSV should live
          repo_id = "cheeka84/tourism-package-pred"
          repo_type = "dataset"

          # ensure dataset repo exists
          try:
              api.repo_info(repo_id=repo_id, repo_type=repo_type)
              print(f"dataset repo exists: {repo_id}")
          except RepositoryNotFoundError:
              print(f"creating dataset repo: {repo_id}")
              create_repo(repo_id=repo_id, repo_type=repo_type, private=False, exist_ok=True, token=os.environ["HF_TOKEN"])

          # upload local CSV (adjust path if your file is elsewhere)
          local_csv = "tourism_package_pred/data/tourism.csv"
          api.upload_file(
              path_or_fileobj=local_csv,
              path_in_repo="tourism.csv",
              repo_id=repo_id,
              repo_type=repo_type,
              commit_message="add raw tourism dataset"
          )
          print("✅ uploaded dataset file to HF")
          PY

  data-prep:
    needs: register-dataset
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: run data preparation
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          python tourism_package_pred/model_building/prep.py

  model-traning:
    needs: data-prep
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: start mlflow server (optional)
        run: |
          nohup mlflow ui --host 0.0.0.0 --port 5000 >/dev/null 2>&1 & 
          sleep 5

      - name: model building (rf vs xgb, upload best)
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          python tourism_package_pred/model_building/train.py

  deploy-hosting:
    needs: [model-traning, data-prep, register-dataset]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: push files to frontend hugging face space
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          python - <<'PY'
          import os, pathlib
          from huggingface_hub import HfApi, create_repo
          from huggingface_hub.utils import RepositoryNotFoundError

          api = HfApi(token=os.environ["HF_TOKEN"])

          # create/update a Space for the Streamlit app
          space_id = "cheeka84/tourism-package-app"
          try:
              api.repo_info(repo_id=space_id, repo_type="space")
              print(f"space exists: {space_id}")
          except RepositoryNotFoundError:
              print(f"creating space: {space_id} (streamlit)")
              create_repo(
                  repo_id=space_id,
                  repo_type="space",
                  private=False,
                  exist_ok=True,
                  token=os.environ["HF_TOKEN"],
                  space_sdk="streamlit",
              )

          # ensure a minimal requirements.txt alongside app.py
          req_path = pathlib.Path("requirements.space.txt")
          req_path.write_text(
              "streamlit\n"
              "pandas\n"
              "numpy\n"
              "scikit-learn\n"
              "xgboost\n"
              "huggingface_hub\n"
              "joblib\n"
          )

          # upload app and requirements
          api.upload_file(
              path_or_fileobj="tourism_package_pred/deployment/app.py",
              path_in_repo="app.py",
              repo_id=space_id,
              repo_type="space",
              commit_message="deploy streamlit app"
          )
          api.upload_file(
              path_or_fileobj=str(req_path),
              path_in_repo="requirements.txt",
              repo_id=space_id,
              repo_type="space",
              commit_message="add requirements for space"
          )
          print("✅ deployed Streamlit Space with app.py + requirements.txt")
          PY
